{
  "name": "ES6",
  "isUpcomingChange": false,
  "dashedName": "es6",
  "helpCategory": "JavaScript",
  "order": 1,
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": [
    {
      "id": "587d7b87367417b2b2512b40",
      "title": "Compare Scopes of the var and let Keywords"
    },
    {
      "id": "587d7b87367417b2b2512b42",
      "title": "Mutate an Array Declared with const"
    },
    {
      "id": "598f48a36c8c40764b4e52b3",
      "title": "Prevent Object Mutation"
    },
    {
      "id": "587d7b87367417b2b2512b43",
      "title": "Use Arrow Functions to Write Concise Anonymous Functions"
    },
    {
      "id": "587d7b88367417b2b2512b44",
      "title": "Write Arrow Functions with Parameters"
    },
    {
      "id": "587d7b88367417b2b2512b46",
      "title": "Set Default Parameters for Your Functions"
    },
    {
      "id": "587d7b88367417b2b2512b47",
      "title": "Use the Rest Parameter with Function Parameters"
    },
    {
      "id": "587d7b89367417b2b2512b48",
      "title": "Use the Spread Operator to Evaluate Arrays In-Place"
    },
    {
      "id": "5cfa550e84205a357704ccb6",
      "title": "Use Destructuring Assignment to Extract Values from Objects"
    },
    {
      "id": "587d7b89367417b2b2512b49",
      "title": "Use Destructuring Assignment to Assign Variables from Objects"
    },
    {
      "id": "587d7b89367417b2b2512b4a",
      "title": "Use Destructuring Assignment to Assign Variables from Nested Objects"
    },
    {
      "id": "587d7b89367417b2b2512b4b",
      "title": "Use Destructuring Assignment to Assign Variables from Arrays"
    },
    {
      "id": "587d7b8a367417b2b2512b4c",
      "title": "Destructuring via rest elements"
    },
    {
      "id": "587d7b8a367417b2b2512b4d",
      "title": "Use Destructuring Assignment to Pass an Object as a Function's Parameters"
    },
    {
      "id": "587d7b8a367417b2b2512b4e",
      "title": "Create Strings using Template Literals"
    },
    {
      "id": "587d7b8a367417b2b2512b4f",
      "title": "Write Concise Object Literal Declarations Using Object Property Shorthand"
    },
    {
      "id": "587d7b8b367417b2b2512b50",
      "title": "Write Concise Declarative Functions with ES6"
    },
    {
      "id": "587d7b8b367417b2b2512b53",
      "title": "Use class Syntax to Define a Constructor Function"
    },
    {
      "id": "587d7b8c367417b2b2512b54",
      "title": "Use getters and setters to Control Access to an Object"
    },
    {
      "id": "5cddbfd622f1a59093ec611d",
      "title": "Create a Module Script"
    },
    {
      "id": "587d7b8c367417b2b2512b56",
      "title": "Use export to Share a Code Block"
    },
    {
      "id": "587d7b8c367417b2b2512b55",
      "title": "Reuse JavaScript Code Using import"
    },
    {
      "id": "587d7b8c367417b2b2512b57",
      "title": "Use * to Import Everything from a File"
    },
    {
      "id": "587d7b8c367417b2b2512b58",
      "title": "Create an Export Fallback with export default"
    },
    {
      "id": "587d7b8d367417b2b2512b59",
      "title": "Import a Default Export"
    },
    {
      "id": "5cdafbb0291309899753167f",
      "title": "Create a JavaScript Promise"
    },
    {
      "id": "5cdafbc32913098997531680",
      "title": "Complete a Promise with resolve and reject"
    },
    {
      "id": "5cdafbd72913098997531681",
      "title": "Handle a Fulfilled Promise with then"
    },
    {
      "id": "5cdafbe72913098997531682",
      "title": "Handle a Rejected Promise with catch"
    }
  ],
  "blockLayout": "legacy-challenge-list"
}